# -*- coding: utf-8 -*-
"""Regression using tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E0qV6Q3HC6yZeyyqA_6phiz8E8WLtxht

Generating the data
"""

import pandas as pd
import numpy as np
import random

random.seed(5)

xtrain= random.sample(range(1, 8000),3000)
ytrain=list(map(lambda t: 1.8*t+32.0 , xtrain))

xtest=random.sample(range(8000, 10000),800)
ytest=list(map(lambda t: 1.8*t+32.0 , xtest))

"""Build a neural network consisting one layer"""

import tensorflow as tf
from tensorflow import keras


l1= tf.keras.layers.Dense(
    1, activation=None, use_bias=True, kernel_initializer='glorot_uniform',
    bias_initializer='zeros', kernel_regularizer=None, bias_regularizer=None,
    activity_regularizer=None, kernel_constraint=None, bias_constraint=None,input_shape= [1]
)


model = tf.keras.Sequential(l1)

"""Train the model"""

model.compile(optimizer=tf.keras.optimizers.Adam(0.1),
              loss='mean_squared_error'
              )

# Trains for 5 epochs.

model.fit(xtrain, ytrain, batch_size=64, epochs=100)

"""Evaluating the model"""

x=model.predict(xtest)

y=np.array(ytest)

import matplotlib.pyplot as plt
plt.plot(xtest,y)
plt.plot(xtest,x)

model.predict([100])

l1.get_weights()



"""**Model 2**"""

l0=tf.keras.layers.Dense(2,input_shape=[1])
l2 = tf.keras.layers.Dense(1)
model2= tf.keras.Sequential([l0,l2])

model2.compile(optimizer=tf.keras.optimizers.Adam(0.1),
              loss='mean_squared_error'
              )

model2.fit(xtrain, ytrain, batch_size=64, epochs=100)

"""Evaluating"""

y1=model2.predict(xtest)
plt.plot(xtest,y)
plt.plot(xtest,y1)

"""model summary and weights"""

model2.summary()

l0.get_weights()

l2.get_weights()



"""**model 3**"""

l10=tf.keras.layers.Dense(4,input_shape=[1])
l11 = tf.keras.layers.Dense(2)
l12 = tf.keras.layers.Dense(1)
model3= tf.keras.Sequential([l10,l11,l12])

model3.compile(optimizer=tf.keras.optimizers.Adam(0.1),
              loss='mean_squared_error'
              )
model3.fit(xtrain, ytrain, batch_size=64, epochs=100)

"""Evaluating"""

y1=model2.predict(xtest)
plt.plot(xtest,y)
plt.plot(xtest,y1)